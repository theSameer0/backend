// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: v1/proto/movie.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CapitalizeClient is the client API for Capitalize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapitalizeClient interface {
	CapitalName(ctx context.Context, in *CapitalizeRequest, opts ...grpc.CallOption) (*CapitalizeReply, error)
}

type capitalizeClient struct {
	cc grpc.ClientConnInterface
}

func NewCapitalizeClient(cc grpc.ClientConnInterface) CapitalizeClient {
	return &capitalizeClient{cc}
}

func (c *capitalizeClient) CapitalName(ctx context.Context, in *CapitalizeRequest, opts ...grpc.CallOption) (*CapitalizeReply, error) {
	out := new(CapitalizeReply)
	err := c.cc.Invoke(ctx, "/pb.Capitalize/CapitalName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapitalizeServer is the server API for Capitalize service.
// All implementations must embed UnimplementedCapitalizeServer
// for forward compatibility
type CapitalizeServer interface {
	CapitalName(context.Context, *CapitalizeRequest) (*CapitalizeReply, error)
	mustEmbedUnimplementedCapitalizeServer()
}

// UnimplementedCapitalizeServer must be embedded to have forward compatible implementations.
type UnimplementedCapitalizeServer struct {
}

func (UnimplementedCapitalizeServer) CapitalName(context.Context, *CapitalizeRequest) (*CapitalizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapitalName not implemented")
}
func (UnimplementedCapitalizeServer) mustEmbedUnimplementedCapitalizeServer() {}

// UnsafeCapitalizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapitalizeServer will
// result in compilation errors.
type UnsafeCapitalizeServer interface {
	mustEmbedUnimplementedCapitalizeServer()
}

func RegisterCapitalizeServer(s grpc.ServiceRegistrar, srv CapitalizeServer) {
	s.RegisterService(&Capitalize_ServiceDesc, srv)
}

func _Capitalize_CapitalName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapitalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapitalizeServer).CapitalName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Capitalize/CapitalName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapitalizeServer).CapitalName(ctx, req.(*CapitalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Capitalize_ServiceDesc is the grpc.ServiceDesc for Capitalize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Capitalize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Capitalize",
	HandlerType: (*CapitalizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CapitalName",
			Handler:    _Capitalize_CapitalName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/proto/movie.proto",
}
